# AUTOGENERATED! DO NOT EDIT! File to edit: ../15-convolutions.ipynb.

# %% auto 0
__all__ = ["def_device", "conv", "to_device", "collate_device"]

# %% ../15-convolutions.ipynb 1
from typing import Mapping

import torch
from torch import nn
from torch.utils.data import default_collate


# %% ../15-convolutions.ipynb 33
def conv(in_channels, out_channels, kernel_size=3, stride=2, act=True):
    """Helper to make a Conv2d with an optional ReLU activation function"""
    res = nn.Conv2d(
        in_channels,
        out_channels,
        stride=stride,
        kernel_size=kernel_size,
        padding=kernel_size // 2,
    )
    if act:
        res = nn.Sequential(res, nn.ReLU())

    return res


# %% ../15-convolutions.ipynb 36
# Work out where we can run things and use that as the default device
def_device = "cuda" if torch.cuda.is_available() else "cpu"


def to_device(x, device=def_device):
    """Calls to_device on tensors,lists of tensors, dicts of tensors"""
    if isinstance(x, Mapping):
        return {k: val.to(device) for k, val in x.items()}

    return type(x)(o.to(device) for o in x)


def collate_device(batch):
    """Custom collate that calls the default_collate and puts the tensors onto the gpu if possible"""
    return to_device(default_collate(batch))
